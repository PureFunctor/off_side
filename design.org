* Design

** Types
This section describes the types used by the off-side layout rule.

*** [pest::]Span
The span type defined by =pest=, which includes a string slice as well
as its start and end offsets. This type does not encode information
about a span's line and column information, ergo, we have to define a
type that would allow us to obtain this information through traversing
byte offsets.

*** [off_side::]Span
This span type expands upon =pest='s span type by introducing line and
column information alongside the start and end offsets. This is
produced by emitted by the lexer instead of just the regular =Span=
type. Moreover, this would also contain the =Rule= that it matches
against, such that the layout algorithm can disambiguate between them.

*** Lexer
This struct type simply wraps around the source string and provides a
function =lex= that parses it and creates a stream of tokens.

*** TokenStream
This iterator struct contains the necessary machinery to convert the
=pest= spans into ours. It holds a reference to the source string that
was parsed, owns a vector of offsets that correspond to each line, and
owns an iterator of the flattened pairs that the lexer provides.

** Pipeline

1. The parser generated by =pest= will try to parse a source file. Given
   that we're using it instead as a lexer, it catches failures
   regarding unknown tokens upfront.
   
2. Once that's done, we take the pairs that it produces and we flatten
   them. We use a wrapper struct that implements =Iterator= to convert
   the pairs produced by =pest= into our own =Span= type, which can then
   be consumed by the layout parser.
